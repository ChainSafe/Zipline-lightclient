Running MIPS processor on chain

Tests from https://github.com/grantae/OpenMIPS/tree/master/software/test/macro/tests
Licensed GPLv3
Requires https://github.com/sergev/LiteBSD/releases/download/tools/gcc-4.8.1-mips-macosx.tgz to build

Instruction set used by minigeth, 55 instructions:
['addi', 'addiu', 'addu', 'and', 'andi',
 'b', 'beq', 'beqz', 'bgez', 'bgtz', 'blez', 'bltz', 'bne', 'bnez',
 'clz', 'divu',
 'j', 'jal', 'jalr', 'jr',
 'lb', 'lbu', 'lui', 'lw', 'lwr',
 'mfhi', 'mflo', 'move', 'movn', 'movz', 'mtlo', 'mul', 'multu',
 'negu', 'nop', 'not', 'or', 'ori',
 'sb', 'sll', 'sllv', 'slt', 'slti', 'sltiu', 'sltu', 'sra', 'srl', 'srlv', 'subu', 'sw', 'swr', 'sync', 'syscall',
 'xor', 'xori']

 There's three ways to run the embedded MIPS engine, see "run_<type>":
 * unicorn -- fastest, uses none of the solidity
 * evm -- uses MIPS.sol, but stubs MIPSMemory.sol to SLOAD/SSTORE and doesn't compute the merkle trie
 * chain -- uses MIPS.sol + MIPSMemory.sol, slowest, will actually run on chain like this
